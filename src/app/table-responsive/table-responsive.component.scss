table {
  width: 100%;
}

td.mat-column-star {
  width: 20px;
  padding-right: 8px !important;
}

.mat-row {
  &:hover {
    background-color: #e9f3ff;
  }
  a {
    color: #3e75ff;
    text-decoration: none;
    &:hover {
    text-decoration: underline;
    }
  }
}

.mat-form-field {
  font-size: 14px;
  width: 100%;
}

.mat-icon {
  color: #3e75ff;
}

@media screen and (max-width: 768px) {
  .mat-elevation-z8 {
    background: transparent;
    box-shadow: none;
  }

  .mat-header-row {
    display: none;
  }

  tbody {
    display: block;
    width: 100%;
  }

  .mat-table {
    background: transparent;
    * {
      box-sizing: border-box;
    }

    /*
    .mat-row {
      display: block;
      overflow: hidden;
      height: auto;
      position: relative;
      clear: both;
      box-shadow: 0 2px 1px -1px rgba(0,0,0,.2), 0 1px 1px 0 rgba(0,0,0,.14), 0 1px 3px 0 rgba(0,0,0,.12);
      background-color: #fff;
      border-radius: 3px;
      + .mat-row {
        margin-top: 24px;
      }
    }
    */
    .mat-row {
      display: flex; /*new */
      flex-direction: column;/*new */
      overflow: hidden;
      height: auto;
      position: relative;
      clear: both;
      box-shadow: 0 2px 1px -1px rgba(0,0,0,.2), 0 1px 1px 0 rgba(0,0,0,.14), 0 1px 3px 0 rgba(0,0,0,.12);
      background-color: #fff;
      border-radius: 3px;
      + .mat-row {
        margin-top: 24px;
      }
    }


    .mat-cell {
      display: block;
      width: 100%;
      padding: 0 16px;
      margin: 16px 0;
      border: 0 none;
      &:first-child {
        padding: 0 48px 0 16px;
        a {
          font-size: 20px;
          // font-weight: 400;
          color: inherit;
        }
        &:before {
          display: none;
        }
      }
      &.m-card-sub-title {
        margin-top: -8px;
        padding: 0 48px 0 16px;
        color: rgba(0,0,0,.54);
      }
    }

    .has_label_on_mobile {
      &:before {
        content: attr(data-label);
        display: inline;
        font-weight: normal;
      }
    }

    .mat-column-star {
      width: auto;
      padding: 8px 0 0 !important;
      margin: 0;
      position: absolute;
      top: 0;
      right: 0;
      &:before {
        display: none;
      }
    }
  }

  .mat-paginator {
    margin-top: 24px;
  }

  /* Personalizando comportamiento */
  .mobile-hidden{
    display: none !important;
  }

  .mat-column-Fecha{
    order: 1;
  }

  .mat-column-Monto{
    order: 3;
  }

  .mat-column-Descripcion{
    order: 2;
  }

  .mat-column-Tipo{
    order: 4;
  }

  .mat-column-ID{
    order: 5;
  }


}




$icon-classes: (
  icon-pin: '\1F4CC',   // Push Pin
  icon-star: '\2605',   // Star
  icon-check: '\2713',  // Check
  icon-info: '\2139'    // Info
);

$colors: (
  icon-pin: red,
  icon-star: orange,
  icon-check: green,
  icon-info: blue
);

$base-indent: 1em;
$max-depth: 10;


@mixin icon-list-recursive($depth: 1, $parent-selectors: ()) {
  @if $depth <= $max-depth {
    $selectors: ();

    // Kombiniere aktuelle Tiefe mit vererbten icon-Klassen
    @each $icon-class, $icon in $icon-classes {
      $new-selectors: ();

      // 1. direkt gesetzte Klasse
      $this-selector: '.nested-list #{'ul ' * ($depth - 1)}ul.#{$icon-class} > li';
      $new-selectors: append($new-selectors, $this-selector, comma);

      // 2. geerbte Klasse aus parent-selectors
      @each $parent in $parent-selectors {
        $inherited: '.nested-list #{$parent} #{'ul ' * ($depth - 1)}ul:not([class*="icon-"]) > li';
        $new-selectors: append($new-selectors, $inherited, comma);
      }

      // Regel definieren
      #{$new-selectors} {
        position: relative;
        padding-left: $base-indent * $depth;

        &::before {
          content: $icon;
          position: absolute;
          left: $base-indent * ($depth - 1);
          color: map-get($colors, $icon-class);
        }

        // Responsive (Bootstrap 4)
        @media (min-width: 576px) {
          padding-left: $base-indent * 1.5 * $depth;
          &::before {
            left: $base-indent * 1.5 * ($depth - 1);
          }
        }

        @media (min-width: 768px) {
          padding-left: $base-indent * 2 * $depth;
          &::before {
            left: $base-indent * 2 * ($depth - 1);
          }
        }

        @media (min-width: 992px) {
          padding-left: $base-indent * 2.5 * $depth;
          &::before {
            left: $base-indent * 2.5 * ($depth - 1);
          }
        }

        @media (min-width: 1200px) {
          padding-left: $base-indent * 3 * $depth;
          &::before {
            left: $base-indent * 3 * ($depth - 1);
          }
        }
      }
    }

    // NÃ¤chste Ebene aufrufen & icon-* Klassen als Eltern mitgeben
    $new-parents: ();
    @each $class, $icon in $icon-classes {
      $selector: '.#{$class}';
      $new-parents: append($new-parents, $selector, comma);
    }

    @include icon-list-recursive($depth + 1, $new-parents);
  }
}
